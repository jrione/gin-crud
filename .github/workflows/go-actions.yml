name: "Go CI"

on:
  push:
    branches:
    - "main"

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.4'
    - name: Build
      run: go build -v -o ./gin-crud
    - name: Inject Config
      run: |
        cat config.example.json  | jq \
        --arg serverListen "0.0.0.0" \
        --arg username "${{ secrets.USERNAME }}" \
        --arg password "${{ secrets.PASSWORD }}" \
        --arg hostname "${{ secrets.HOSTNAME }}" \
        --arg port "${{ secrets.PORT }}" \
        --arg name "${{ secrets.NAME }}" \
        '(. | .server.listen = $serverListen | .database.username = $username | .database.password = $password | .database.hostname = $hostname | .database.port = $port | .database.name = $name )' | tee config.json
    - name: Save Artifact
      uses: actions/upload-artifact@v4
      with: 
        name: env_artifact
        path: ./config.json
        retention-days: 1
    - name: Test
      run: |
        ./gin-crud &
        sleep 10
        curl -sSi localhost:8000/test | tac | tac | grep "200 OK"
    - name: Log in to Docker Hub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: p0x07g/${{ vars.APP_NAME }}
    - name: Build and push Docker image
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-app:
    needs: build-app
    runs-on: ubuntu-latest
    steps:
    - name: executing remote ssh commands using password
      run: |
        sshpass -p"${{secrets.REMOTE_PASSWORD}}" ssh -o StrictHostKeyChecking=no ${{secrets.REMOTE_USERNAME}}@${{secrets.REMOTE_HOST}} docker stop ${{ vars.APP_NAME }} || true
        sshpass -p"${{secrets.REMOTE_PASSWORD}}" ssh -o StrictHostKeyChecking=no ${{secrets.REMOTE_USERNAME}}@${{secrets.REMOTE_HOST}} docker rm ${{ vars.APP_NAME }} || true
        sshpass -p"${{secrets.REMOTE_PASSWORD}}" ssh -o StrictHostKeyChecking=no ${{secrets.REMOTE_USERNAME}}@${{secrets.REMOTE_HOST}} docker pull p0x07g/${{ vars.APP_NAME }}
        sshpass -p"${{secrets.REMOTE_PASSWORD}}" ssh -o StrictHostKeyChecking=no ${{secrets.REMOTE_USERNAME}}@${{secrets.REMOTE_HOST}} docker run --name ${{ vars.APP_NAME }} -p 80:8000 -d p0x07g/${{ vars.APP_NAME }}:main
          
